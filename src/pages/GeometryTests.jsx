// PhysicsTests.jsx
import React, { useState } from 'react';
import '../styles/pages/Tests.scss'; // –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç SCSS
import 'katex/dist/katex.min.css';
import TestPromo from "../components/cards/TestPromo.jsx";
import Header from "../components/Header.jsx";
import TestModal from '../components/TestModal.jsx';
import useScrollLock from '../hooks/useScrollLock';

import { generateFinalTest } from '../components/FinalTestGenerator';

import form7_test1 from './data/geometry_tests/7/7_1_geometrystart.json';
import form7_test2 from './data/geometry_tests/7/7_2_triangle.json';
import form7_test3 from './data/geometry_tests/7/7_3_parallel.json';
import form7_test4 from './data/geometry_tests/7/7_4_anglesandsides.json';
import form7_test5 from './data/geometry_tests/7/7_5_equaltriangles.json';

import form8_test1 from './data/geometry_tests/8/8_1_quadrilaterals.json';
import form8_test2 from './data/geometry_tests/8/8_2_square.json';
import form8_test3 from './data/geometry_tests/8/8_3_similarity.json';
import form8_test4 from './data/geometry_tests/8/8_4_bisectortheorem.json';
import form8_test5 from './data/geometry_tests/8/8_5_circle.json';
import form8_test6 from './data/geometry_tests/8/8_6_vectors.json';

import form9_test1 from './data/geometry_tests/9/9_1_vectors.json';
import form9_test2 from './data/geometry_tests/9/9_2_coordinate.json';
import form9_test3 from './data/geometry_tests/9/9_3_correlations.json';
import form9_test4 from './data/geometry_tests/9/9_4_circles.json';
import form9_test5 from './data/geometry_tests/9/9_5_move.json';
import form9_test6 from './data/geometry_tests/9/9_6_stereometry.json';
import form9_test7 from './data/geometry_tests/9/9_7_formulas.json';

import form10_test1 from './data/geometry_tests/10/10_1_stereometry.json';
import form10_test2 from './data/geometry_tests/10/10_2_polyhedra.json';
import form10_test3 from './data/geometry_tests/10/10_3_section.json';
import form10_test4 from './data/geometry_tests/10/10_4_rotation.json';
import form10_test5 from './data/geometry_tests/10/10_5_coordinates.json';
import form10_test6 from './data/geometry_tests/10/10_6_planimetry.json';

import form11_test1 from './data/geometry_tests/11/11_1_sections.json';
import form11_test2 from './data/geometry_tests/11/11_2_volumes.json';
import form11_test3 from './data/geometry_tests/11/11_3_sphere.json';
import form11_test4 from './data/geometry_tests/11/11_4_vectors.json';
import form11_test5 from './data/geometry_tests/11/11_5_equations.json';
import form11_test6 from './data/geometry_tests/11/11_6_planimetry.json';
import form11_test7 from './data/geometry_tests/11/11_7_stereometry.json';
import form11_test8 from './data/geometry_tests/11/11_8_formulas.json';


const finalTest_7 = generateFinalTest("–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ 7 –∫–ª–∞—Å—Å", [form7_test1,
   form7_test2, form7_test3, form7_test4, form7_test5], 10);
const finalTest_8 = generateFinalTest("–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ 8 –∫–ª–∞—Å—Å", [form8_test1,
   form8_test2, form8_test3, form8_test4, form8_test5, form8_test6], 10);
const finalTest_9 = generateFinalTest("–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ 9 –∫–ª–∞—Å—Å", [form9_test1,
   form9_test2, form9_test3, form9_test4, form9_test5, form9_test6], 10);
const finalTest_10 = generateFinalTest("–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ 10 –∫–ª–∞—Å—Å", [form10_test1,
   form10_test2, form10_test3, form10_test4, form10_test5, form10_test6], 10);
const finalTest_11 = generateFinalTest("–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ 11 –∫–ª–∞—Å—Å", [form11_test1,
   form11_test2, form11_test3, form11_test4, form11_test5, form11_test6, form11_test7], 10);

const tests = {
  info: [],
  7: [
    {
      label: "1. –ù–∞—á–∞–ª—å–Ω—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è",
      testData: form7_test1
    },
    {
      label: "2. –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏ (–º–µ–¥–∏–∞–Ω—ã, –±–∏—Å—Å–µ–∫—Ç—Ä–∏—Å—ã –∏—Ç–¥.)",
      testData: form7_test2
    },
    {
      label: "3. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—Ä—è–º—ã–µ",
      testData: form7_test3
    },
    {
      label: "4. –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ –∏ —É–≥–ª–∞–º–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞",
      testData: form7_test4
    },
    {
      label: "5. –ü—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤",
      testData: form7_test5
    },
    {
      label: "–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç 7 –∫–ª–∞—Å—Å",
      testData: finalTest_7
    }
  ],
  8: [
    {
      label: "1. –ß–µ—Ç—ã—Ä—ë—Ö—É–≥–æ–ª—å–Ω–∏–∫–∏",
      testData: form8_test1
    },
    {
      label: "2. –ü–ª–æ—â–∞–¥—å",
      testData: form8_test2
    },
    {
      label: "3. –ü–æ–¥–æ–±–Ω—ã–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏",
      testData: form8_test3
    },
    {
      label: "4. –¢–µ–æ—Ä–µ–º–∞ –æ –±–∏—Å—Å–µ–∫—Ç—Ä–∏—Å–µ",
      testData: form8_test4
    },
    {
      label: "5. –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å",
      testData: form8_test5
    },
    {
      label: "6. –í–µ–∫—Ç–æ—Ä—ã",
      testData: form8_test6
    },
    {
      label: "–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç 8 –∫–ª–∞—Å—Å",
      testData: finalTest_8
    }
  ],
  9: [
    {
      label: "1. –í–µ–∫—Ç–æ—Ä—ã",
      testData: form9_test1
    },
    {
      label: "2. –ú–µ—Ç–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
      testData: form9_test2
    },
    {
      label: "3. –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ",
      testData: form9_test3
    },
    {
      label: "4. –î–ª–∏–Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞",
      testData: form9_test4
    },
    {
      label: "5. –î–≤–∏–∂–µ–Ω–∏—è, —Å–∏–º–º–µ—Ç—Ä–∏—è",
      testData: form9_test5
    },
    {
      label: "6. –ù–∞—á–∞–ª–∞ —Å—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏–∏",
      testData: form9_test6
    },
    {
      label: "–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç 8 –∫–ª–∞—Å—Å",
      testData: finalTest_9
    },
    {
      label: "–§–æ—Ä–º—É–ª—ã –∫ –û–ì–≠",
      testData: form9_test7
    },
  ],
  10: [
    {
      label: "1. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è",
      testData: form10_test1
    },
    {
      label: "2. –ú–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–∏",
      testData: form10_test2
    },
    {
      label: "3. –°–µ—á–µ–Ω–∏—è",
      testData: form10_test3
    },
    {
      label: "3. –¢–µ–ª–∞ –≤—Ä–∞—â–µ–Ω–∏—è",
      testData: form10_test4
    },
    {
      label: "4. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –≤–µ–∫—Ç–æ—Ä—ã –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ",
      testData: form10_test5
    },
    {
      label: "5. –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–ª–∞–Ω–∏–º–µ—Ç—Ä–∏–∏ (–∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã)",
      testData: form10_test6
    },
    {
      label: "–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç 10 –∫–ª–∞—Å—Å",
      testData: finalTest_10
    }
  ],
  11: [
    {
      label: "1. –°–µ—á–µ–Ω–∏—è –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–æ–≤",
      testData: form11_test1
    },
    {
      label: "2. –û–±—ä—ë–º—ã –∏ –ø–ª–æ—â–∞–¥–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–ª",
      testData: form11_test2
    },
    {
      label: "3. –í–ø–∏—Å–∞–Ω–Ω—ã–µ –∏ –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–∏",
      testData: form11_test3
    },
    {
      label: "4. –í–µ–∫—Ç–æ—Ä—ã –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ",
      testData: form11_test4
    },
    {
      label: "5. –£—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ",
      testData: form11_test5
    },
    {
      label: "6. –ü–ª–∞–Ω–∏–º–µ—Ç—Ä–∏—è –ï–ì–≠",
      testData: form11_test6
    },
    {
      label: "7. –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è –ï–ì–≠",
      testData: form11_test7
    },
    {
      label: "–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç 11 –∫–ª–∞—Å—Å",
      testData: finalTest_11
    },
    {
      label: "–§–æ—Ä–º—É–ª—ã –∫ –ï–ì–≠",
      testData: form11_test8
    }
  ],
};

const GeometryTests = () => {
  const [activeTab, setActiveTab] = useState("info");
  const [openTest, setOpenTest] = useState(null);
  useScrollLock(!!openTest);

  const renderTabButtons = () => (
    <div className="physics-tests-page__tab-buttons">
      {Object.keys(tests).map((grade) => (
        <button
          key={grade}
          className={activeTab === grade ? 'active' : ''}
          onClick={() => setActiveTab(grade)}
        >
          {grade === "info" ? "–ò–Ω—Ñ–æ" : `${grade} –∫–ª–∞—Å—Å`}
        </button>
      ))}
    </div>
  );

  const renderContent = () => {
    if (activeTab === "info") return <TestPromo />;
    return (
      <div className="physics-tests-page__cards-grid">
        {tests[activeTab].map((test, idx) => (
          <div key={idx} className="physics-tests-page__test-trigger">
            <button onClick={() => setOpenTest(test)}>{test.label}</button>
          </div>
        ))}
      </div>
    );
  };

  return (
    <div className="container-main">
      <Header />
      <h2 data-aos="fade-up" className="physics-tests-page__title">üß† –ì–µ–æ–º–µ—Ç—Ä–∏—è –ø—Ä–∞–∫—Ç–∏–∫—É–º</h2>
      {renderTabButtons()}
      <div className="physics-tests-page__tab-content">{renderContent()}</div>

      {openTest && (
        <TestModal
          isOpen={!!openTest}
          onClose={() => setOpenTest(null)}
          testData={openTest.testData}
          {...(openTest.label === "–§–æ—Ä–º—É–ª—ã –∫ –ï–ì–≠" || openTest.label === "–§–æ—Ä–º—É–ª—ã –∫ –û–ì–≠"
            ? { numberQuest: 30 }
            : {}
          )}
        />
      )}
    </div>
  );
};

export default GeometryTests;